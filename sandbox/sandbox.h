//
// Created by Eugene Junghyun Kim on 1/7/2021.
//

#ifndef SANDBOX_SANDBOX_H
#define SANDBOX_SANDBOX_H

#include <string>
#include <vector>

class Sandbox;
class SandboxBuilder;

extern "C" void set_sandbox_limit(Sandbox *ptr);


class Sandbox {
    friend class SandboxBuilder;
private:
    bool debug;
    std::string src_root_fs_dir, target_root_fs_dir, sandbox_dir;
    std::vector<std::string> command;
    long long time_limit_in_ms, memory_limit_in_mb, file_size_limit_in_mb, time_elapsed_in_ms, memory_used_in_mb;
    int return_code;
    int *fd;
protected:
    Sandbox() {}

    // Set the debug mode.
    void set_debug(bool debug);

    // Set the directory where it contains root file system for the sandbox.
    void set_src_root_fs_dir(std::string &dir);

    // Set the directory where rootfs is stored inside the container.
    void set_target_root_fs_dir(std::string &dir);

    // Set the directory where the file and compiled binary exists.
    void set_sandbox_dir(std::string &dir);

    // Set the command to execute inside the sandbox.
    void set_command(std::vector<std::string> &command);

    // Set the timeout after which the sandbox terminates the process forcefully.
    void set_time_limit(int time_limit_in_ms);

    // Set the memory limit so that the sandbox terminates the process if the process
    // uses more memory than memory_limit_in_mb.
    void set_memory_limit(int memory_limit_in_mb);

    // Set the maximum file size generated by the user output (e.g stdout).
    void set_file_size_limit_in_mb(int file_size_in_mb);

public:
    static SandboxBuilder builder();
    bool is_debug() const;
    std::string& get_src_root_fs_dir();
    std::string& get_target_root_fs_dir();
    std::string& get_sandbox_dir();
    std::vector<std::string>& get_command();
    long long get_time_limit_in_ms() const;
    long long get_memory_limit_in_mb() const;
    long long get_file_size_limit_in_mb() const;
    // Store the running time of the user submitted code in terms of CPU time (in ms).
    void set_time_elapsed(long long nanoseconds);
    // Store the memory usage of the user submitted code in MB.
    void set_memory_used(long long bytes);
    long long get_time_elapsed() const;
    long long get_memory_used() const;
    void set_return_code(int return_code);
    int get_return_code() const;
    void set_fd(int *fd);
    int* get_fd();
    void run();
};

#endif //SANDBOX_SANDBOX_H
